const smallestDivisor = (num) => {
  if(num===1) return 1;
  const iter = (num, divi, modul) => {
    if (modul === 0) {
      return divi-1;
    }
    return iter(num, divi+1, num % divi);
  };
  return iter(num, 2, 1);
};
smallestDivisor(15);
smallestDivisor(22);
smallestDivisor(9);
export default smallestDivisor;


// BEGIN
  const iter = (acc) => {
    // We use 'num / 2' in the condition below, and not 'num'.
    // This is a simple optimization: a number cannot be divided
    // by a number larger than its half.
    if (acc > num / 2) {
      return num;
    }
    if (num % acc === 0) {
      return acc;
    }
    return iter(acc + 1);
  };

  return iter(2);
// END

// BEGIN
const smallestDivisor = (acc) => {
  let counter = 2;
  if (acc < 1) {return NaN;}
  if (acc == 1) {return acc;}
  while (counter <= acc) {  
    if (acc % counter===0) {
      return counter;
    } 
    else { 
      counter = counter + 1; 
    }
  
  }
 
};
smallestDivisor(6);
 // END
 
//begin find plain integer
const isPrime = (num) => {
  let result='';
  if(num<=1){
  	return false;
  }
  else{
  	for(let counter = 1; counter <= num; counter++){
       result=num % counter;
       if(result==0 && counter<num  && counter>1){
       return false;
       }             
    }
    return true;
  }

};

isPrime(10);
// END




