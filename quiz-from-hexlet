<script>
const toUpperCase = str => str.toUpperCase();

var answer1 = "Isd sdfA";
var answer2 = " ";
var answer3 = 'He is called "Johnny"'; 

const bigLettersCount = (str) => {
  // BEGIN (write your solution here)
  var i = 0;
  var upornot = 0;
  var counter = 0;
  while (i < str.length) {
    upornot = toUpperCase(str[i]) === str[i];
    if(upornot)
    {
      counter = counter +1;  
    }
    i = i + 1;
  }
  return counter
  // END
};

console.log(bigLettersCount(answer1));

</script>
<?php
function fib($num)
{
    if($num==0){return 0;}
    if($num==1){return 1;}
    return fib($num-1) + fib($num-2);
}
function factorial($num)
{
    if($num==0){return 1;}
    if($num==1){return 1;}
    return $num * factorial($num - 1);
}

//function uniq values in array
function uniq(array $arr)
{
    $result = [];
    for ($i = 0; $i < sizeof($arr); $i++) {
        if (in_array($arr[$i], $result)) {
            continue;
        }
        $result[] = $arr[$i];
    }
    return $result;
}

function factorial($num) // Tail recursion
{
    $powIter = function ($num, $acc) use (&$powIter) {
        if ($num == 0) { return $acc; }
        return $powIter ($num - 1, $acc * $num);
    };
    return $powIter ($num, 1);
}

//Smallest Divisor func
function smallestDivisor($num)
{   
    if($num==1)return $num;
    $modul=1;
    
    $powIter = function ($num, $acc, $modul) use (&$powIter) {
        if ($modul == 0) { return $acc - 1; }
        return $powIter ($num, $acc + 1, $num % $acc);
    };
    return $powIter ($num, 2, $modul);
    // END
}


function wordsCount($sentence){
    if(empty($sentence)){
        return;
    }
    $new_arr = [];
    $arr = explode(' ', $sentence);
    foreach($arr as $value){
        if( (!array_key_exists($value, $new_arr)) && (!empty($value)) ){
           $new_arr[$value] = 1;         
        }elseif(!empty($value)){
            $new_arr[$value] += 1;
        }    
    }
    return $new_arr;
}

function multiArgs(...$arg){
    if($arg==null){
        return null;
    }
    $result = $arg[0];
    foreach($arg as $key => $val){
        if($key>0){
            $result *= $val; 
        }

    }
    var_dump( $result);
}


use function Functional\map;

///powerOfString()
function powerOfString($str)
{
    $out = str_split($str);
    $result = map($out, function($info){
        return ord($info);
    });
    return array_sum($result);

}


function compact(array $array)
{
    foreach($array as $kay => $val){
       if($val===null){
           unset($array[$kay]);
       }
    }
   
    var_dump($array);
}

//sum() 
function sum($start, $finish, $func)
{
    if ($start > $finish){return 0;}
    return $func($start)+ sum($start+1,  $finish, $func); 
}
echo sum(1, 3, function($x){return $x;});


function product($num1, $num2, $func)
{  
    if ($num1 == $num2){return $num2;} 
    return $func(product($num1, $num2-1, $func), $num2); 
}

function addDigits($str){
   
   $out = str_split($str);
   $max = count($out);
    $res=0;

   for($i=0; $i < $max; $i++){
        $res += $out[$i]; 
        $out2 = str_split($res);
        if( count($out2)>1 )
        {
           $res = $out2[0]+$out2[1]; ;
        }
        else{ }
   }
   return $res; 
}


function evenSquareSum($array)
{
    $evenNumbers = select($array, function ($item) {
        return $item % 2 == 0;
    });

    $squaredNumbers = map($evenNumbers, function ($item) {
        return $item ** 2;
    });

    return array_sum($squaredNumbers);
}
